#!/usr/bin/python
"""
"""
from random import randint
from threading import Thread
from psutil import NoSuchProcess
from rpyc.utils.registry import UDPRegistryServer

from webkit_scraper import Node, NodeFactory, WebPageStub

from rpyc.utils.server import ThreadedServer
from rpyc import Service

import logging
logger = logging.getLogger(__name__)

DEFAULT_HOST = '127.0.0.1'
DISCOVERY_PORT =  18811
SERVICE_NAME = 'WEBKIT'
UNIX_SOCKET = '/tmp/webkit_service'

UNREG_RSS = 200e6
UNREG_TIMEOUT = 600
KILL_RSS = 256e6
KILL_TIMEOUT = 900


def expose(*names, **kw):
    def decorate(Class):
        methods = dict( (name,getattr(Class,name)) for name in names )
        class Decorated(Class):
            def __init__(self, *args, **kwargs):
                kwargs.update(kw)
                super(Decorated, self).__init__(*args, **kwargs)
        for name,meth in methods.iteritems():
            setattr(Decorated, 'exposed_'+name, meth)
        return Decorated
    return decorate


@expose(
    'is_visible', 'set', 'get_bool_attr', 'drag_to', 'text', 'is_attached', 'eval_script', 'submit', 'path', 'click',
    'select_option', 'value', 'is_multi_select', 'set_attr', 'exec_script', 'is_selected', 'unselect_options',
    'tag_name', 'get_node_factory', 'is_checked', 'get_attr', 'is_disabled', 'xpath',
)
class _ExposedNode(Node):
    pass
class ExposedNode(_ExposedNode): pass

class ExposedNodeFactory(NodeFactory):
    _Node = ExposedNode

@expose(
    'body', 'reset', 'render', 'set_cookie', 'set_proxy', 'status_code', 'set_header', 'clear_proxy', 'url',
     'cookies', 'eval_script', 'wait', 'set_html', 'headers', 'exec_script', 'issue_node_cmd', 'visit', 'set_attribute',
     'source', 'clear_cookies', 'set_viewport_size', 'set_error_tolerant', 'reset_attribute', 'xpath',
    node_factory_class = ExposedNodeFactory
)
class _WebkitService(Service, WebPageStub):
    __name__ = 'MyName'
    def __init__(self, *args, **kwargs):
        node_factory_class = kwargs.pop('node_factory_class')
        Service.__init__(self, *args, **kwargs)
        WebPageStub.__init__(self, node_factory_class=node_factory_class)

    def on_connect(self):
        logger.info('Client conected.')
    def on_disconnect(self):
        logger.info('Client disconected. Stopping Webkit instance.')
        self.stop()
class WebkitService(_WebkitService): pass

@expose('discover')
class _Discovery(Service):
    services = {}
    processes = {}
    @staticmethod
    def socket_info_str(info):
        return  ('%(socket_path)s' if 'socket_path' in info else '[%(hostname)s]:%(port)d' ) % info
    @classmethod
    def add(cls, process, service):
        logger.info('Registering server pid %d listening on %s' % (process.pid, cls.socket_info_str(process.info)))
        cls.processes[process.pid] = process
        if service not in cls.services:
            cls.services[service] = set()
        info = frozenset(process.info.items())
        if (process.pid,info) not in cls.services[service]:
            cls.services[service].add((process.pid, info))
        else:
            logger.warn('Server pid %d already registered and listening on %s' % (process.pid, cls.socket_info_str(process.info)))
    @classmethod
    def remove(cls, process, service):
        info = frozenset(process.info.items())
        if service in cls.services and (process.pid,info) in cls.services[service]:
            logger.info('Deregistering server pid %d listening on %s' % (process.pid, cls.socket_info_str(process.info)))
            cls.services[service].remove((process.pid, info))
    @classmethod
    def count(cls, service):
        if service in cls.services:
            return len(cls.services[service])
        return 0
    @classmethod
    def get(cls, service):
        if service in cls.services:
            s = list(cls.services[service])
            pid,info = s[randint(0, len(s)-1)]
            return list(info)
        else:
            return None
    def discover(self, query):
        return self.get(query)
class Discovery(_Discovery): pass

if __name__ == '__main__':
    logging.basicConfig(format='%(levelname)s:%(message)s',level=logging.INFO)

    import os
    import time
    from multiprocessing import Process

    class MyRegistrySever(UDPRegistryServer):
        def cmd_register(self, host, names, port):
            pass
        def cmd_unregister(self, host, port):
            pass

    class MyProcess(Process):
        def __init__(self, host=None, port=None, socket_path = None):
            super(MyProcess, self).__init__()
            self._port= port
            self._host = host
            self._socket_path = socket_path
            if self.socket:
                self._server = ThreadedServer(WebkitService, socket_path=self.socket)
            else:
                self._server = ThreadedServer(WebkitService, hostname=self.host, port=self.port)
            self._ps = None
        def run(self):
            self._server.start()
            os._exit(0)
        @property
        def ps(self):
            if self._ps is None:
                import psutil
                try:
                    self._ps  = psutil.Process(self.pid)
                except NoSuchProcess:
                    pass
            if self._ps is not None and not self._ps.is_running():
                self._ps = None
            return self._ps
        @property
        def port(self):
            return self._port
        @property
        def host(self):
            return self._host
        @property
        def socket(self):
            return self._socket_path
        @property
        def info(self):
            if self.socket:
                return {
                    'socket_path': self.socket,
                    }
            else:
                return {
                    'hostname': self.host,
                    'port': self.port,
                    }
        @property
        def service_name(self):
            return self._server.service.get_service_name()
        @property
        def create_time(self):
            return self.ps.create_time if self.ps else None
        @property
        def mem(self):
            return self.ps.get_memory_info()  if self.ps else None
        @property
        def rss(self):
            return self.mem[0] if self.mem else None
        @property
        def vms(self):
            return self.mem[1] if self.mem else None
        def kill(self):
            logger.warning('Killing process pid %d.'%self.pid)
            if self.socket:
                os.remove(self.socket)
            self.ps.kill()
        def terminate(self):
            self.ps.terminate()

    class RegistryServerHandler(Thread):
        def __init__(self):
            super(RegistryServerHandler, self).__init__()
            import os, shutil
            if os.path.exists(UNIX_SOCKET):
                shutil.rmtree(UNIX_SOCKET)
            os.mkdir(UNIX_SOCKET)
            path = '%s/%d' % (UNIX_SOCKET, DISCOVERY_PORT)
            self.server = ThreadedServer(Discovery, socket_path=path)
        def run(self):
            self.server.start()
        def add(self, process):
            return Discovery.add(process, SERVICE_NAME)
        def remove(self, process):
            return Discovery.remove(process, SERVICE_NAME)
        def count(self):
            return Discovery.count(SERVICE_NAME)

    class MyProcessHandler(Thread):
        def __init__(self, registry):
            super(MyProcessHandler, self).__init__()
            self.daemon = True
            self._registry = registry
        def run(self):
            import os
            if not os.path.exists(UNIX_SOCKET):
                os.mkdir(UNIX_SOCKET)
            path = '/'
            while os.path.exists(path):
                path = '%s/%d' % (UNIX_SOCKET, randint(10000,20000))
            process = MyProcess(socket_path = path)
            process.start()
            self._registry.add(process)
            try:
                while True:
                    process.join(0.1)
                    if not process.is_alive():
                        logger.info('Process pid %d found dead.' % process.pid)
                        break
                    if process.rss is None or process.create_time is None:
                        continue
                    if (process.rss > UNREG_RSS) or (time.time() - process.create_time > UNREG_TIMEOUT):
                        self._registry.remove(process)
                    if (process.rss > KILL_RSS) or (time.time() - process.create_time > KILL_TIMEOUT):
                        process.kill()
                        while process.is_alive():
                            process.join(1)
                        break
            finally:
                self._registry.remove(process)

    registry = RegistryServerHandler()
    registry.start()

    timeout = 40

    while True:
        try:
            if registry.count()<4:
                handler = MyProcessHandler(registry)
                handler.start()
                time.sleep(timeout)
                if timeout > 0:
                    timeout -= 10
            time.sleep(0.1)
        except KeyboardInterrupt:
            break

    registry.server.close()
    exit(0)
